//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE COMMA DOT APOS LBKT RBKT SEMI>;
    mods = <(MOD_LSFT)>;
};

/ {
    combos {
        compatible = "zmk,combos";

        ru_layer {
            bindings = <&ru_layer>;
            key-positions = <37 32>;
            layers = <1 0>;
        };

        en_layer {
            bindings = <&en_layer>;
            key-positions = <36 33>;
        };

        caps_word {
            bindings = <&togle_shift>;
            key-positions = <16 13>;
        };
    };

    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        m_rBraket_backslash: m_rBraket_backslash {
            compatible = "zmk,behavior-tap-dance";
            label = "M_RBRAKET_BACKSLASH";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>, <&kp BACKSLASH>;

            tapping-term-ms = <200>;
        };

        i_o: i_o {
            compatible = "zmk,behavior-tap-dance";
            label = "I_O";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp O>;

            tapping-term-ms = <200>;
        };

        I_O: I_O {
            compatible = "zmk,behavior-tap-dance";
            label = "I_O";
            #binding-cells = <0>;
            bindings = <&kp LS(I)>, <&kp LS(O)>;
        };

        M_sRBraket_sBackslash: M_sRBraket_sBackslash {
            compatible = "zmk,behavior-tap-dance";
            label = "M_SRBRAKET_SBACKSLASH";
            #binding-cells = <0>;
            bindings =
                <&kp LS(M)>,
                <&kp LA(RIGHT_BRACKET)>,
                <&kp LS(BACKSLASH)>;
        };

        shift_tapdance_i_o: shift_tapdance_i_o {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TAPDANCE_I_O";
            bindings = <&i_o>, <&I_O>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_tapdance_m_rb_bs: shift_tapdance_m_rb_bs {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TAPDANCE_M_RB_BS";
            bindings = <&none>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        ru_layer: change_leng_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(SPACE)) &to 1>;
            label = "CHANGE_LENG_LAYER";
        };

        en_layer: en_ru_layers {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(SPACE)) &to 0>;
            label = "EN_RU_LAYERS";
        };

        ru_backslash: ru_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(SLASH)) &kp SPACE &kp BACKSPACE>;
            label = "RU_BACKSLASH";
            tap-ms = <10>;
        };

        togle_shift: togle_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_SHIFT>;
            label = "TOGLE_SHIFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        english {
            label = "english";
            bindings = <
       &kp Q        &kp P        &kp H         &kp Y         &kp X        &kp Z            &kp W         &kp D         &kp L        &kp V
       &hrm LGUI E  &hrm LALT A  &hrm LCTRL O  &hrm LSHFT I  &kp U        &kp M            &hrm RSHFT S  &hrm RCTRL T  &hrm RALT R  &hrm RGUI N
&none  &kp J        &none        &none         &kp K         &none        &kp G            &kp F         &kp C         &none        &kp B        &none
                                 &lt 0 TAB     &lt 4 SPACE   &lt 8 ESC    &lt 6 BACKSPACE  &lt 2 SPACE   &lt 9 RET
            >;
        };

        russian {
            bindings = <
       &kp DOT      &kp G        &kp LBKT      &kp S         &kp Z                      &kp P            &shift_tapdance_i_o  &kp L                 &kp K        &kp D
       &hrm LGUI T  &hrm LALT F  &hrm LCTRL J  &hrm LSHFT B  &kp E                      &kp V            &hrm RSHFT C         &hrm RIGHT_CONTROL N  &hrm RALT H  &hrm RGUI Y
&none  &kp Q        &kp APOS     &kp W         &kp R         &shift_tapdance_m_rb_bs    &kp U            &kp A                &kp SEMI              &kp X        &kp COMMA    &none
                                 &lt 11 TAB    &lt 5 SPACE   &lt 8 ESCAPE               &lt 7 BACKSPACE  &lt 3 SPACE          &lt 9 RET
            >;
        };

        en_symbols {
            bindings = <
       &kp FSLH                      &kp STAR                    &kp MINUS                   &kp PLUS               &kp HASH    &kp AMPERSAND      &kp EQUAL                 &kp PIPE                              &kp PERCENT                   &kp CARET
       &hrm LEFT_COMMAND LEFT_BRACE  &hrm LEFT_ALT LEFT_BRACKET  &hrm LEFT_CONTROL RS(LPAR)  &hrm LSHIFT LESS_THAN  &kp SQT     &kp DOUBLE_QUOTES  &hrm RSHIFT GREATER_THAN  &hrm RIGHT_CONTROL RIGHT_PARENTHESIS  &hrm RIGHT_ALT RIGHT_BRACKET  &hrm RIGHT_COMMAND RIGHT_BRACE
&none  &kp BACKSLASH                 &none                       &none                       &kp UNDERSCORE         &kp AT      &none              &kp DOLLAR                &kp GRAVE                             &kp TILDE                     &none                           &none
                                                                 &lt 6 TAB                   &trans                 &trans      &trans             &trans                    &trans
            >;
        };

        ru_symbols {
            bindings = <
       &kp FSLH              &kp LA(N8)           &kp MINUS          &kp LS(EQUAL)                  &kp LA(N3)        &kp LA(N7)            &kp EQUAL                        &kp LA(LS(N1))     &kp LA(N5)       &kp LA(N6)
       &hrm LEFT_GUI LA(N9)  &hrm LALT LS(GRAVE)  &hrm LCTRL LS(N9)  &hrm LEFT_SHIFT LS(LA(COMMA))  &kp LS(LA(N9))    &kp LS(LA(NUMBER_2))  &hrm RIGHT_SHIFT LS(LA(PERIOD))  &hrm RCTRL LS(N0)  &hrm RALT GRAVE  &hrm RGUI LA(N0)
&none  &ru_backslash         &none                &none              &kp LS(MINUS)                  &kp LA(N2)        &none                 &kp LA(NUMBER_4)                 &kp LA(LS(N0))     &kp LA(LS(M))    &none             &none
                                                  &lt 6 TAB          &trans                         &trans            &trans                &trans                           &trans
            >;
        };

        en_punct {
            bindings = <
       &none             &none                   &none                        &none                &none      &none              &none                   &none                     &none                       &none
       &kp LEFT_COMMAND  &hrm LEFT_ALT QUESTION  &hrm LEFT_CONTROL SEMICOLON  &hrm LEFT_SHIFT DOT  &kp SQT    &kp DOUBLE_QUOTES  &hrm RIGHT_SHIFT COMMA  &hrm RIGHT_CONTROL COLON  &hrm RIGHT_ALT EXCLAMATION  &hrm RIGHT_GUI MINUS
&none  &none             &none                   &none                        &none                &none      &none              &none                   &none                     &none                       &none                 &none
                                                 &trans                       &trans               &trans     &trans             &trans                  &trans
            >;
        };

        ru_punct {
            bindings = <
       &none         &none                    &none                     &none                   &none     &none             &none                          &none                      &none                        &none
       &kp LEFT_GUI  &hrm LEFT_ALT RS(SLASH)  &hrm LEFT_CONTROL RS(N8)  &hrm LEFT_SHIFT RS(N7)  &none     &kp LS(NUMBER_2)  &hrm RIGHT_SHIFT LS(NUMBER_6)  &hrm RIGHT_CONTROL LS(N5)  &hrm RIGHT_ALT LS(NUMBER_1)  &hrm RIGHT_GUI MINUS
&none  &none         &none                    &none                     &none                   &none     &none             &none                          &none                      &none                        &none                 &none
                                              &trans                    &trans                  &trans    &trans            &trans                         &trans
            >;
        };

        en_math {
            label = "EN_MATH";
            bindings = <
       &kp ASTERISK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS     &none    &none                   &none      &none          &none
       &kp EQUAL     &kp NUMBER_4  &kp N5        &kp N6        &kp N0       &kp DOT  &hrm RIGHT_SHIFT COMMA  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
&none  &kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS    &none    &none                   &none      &none          &none          &none
                                   &trans        &trans        &trans       &trans   &trans                  &trans
            >;
        };

        ru_math {
            label = "RU_MATH";
            bindings = <
       &kp ASTERISK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS     &none       &none                          &none      &none          &none
       &kp EQUAL     &kp NUMBER_4  &kp N5        &kp N6        &kp N0       &kp LS(N7)  &hrm RIGHT_SHIFT LS(NUMBER_6)  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
&none  &kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS    &none       &none                          &none      &none          &none          &none
                                   &trans        &trans        &trans       &trans      &trans                         &trans
            >;
        };

        navi {
            bindings = <
       &none     &none     &none      &none           &none     &none   &kp HOME        &kp PAGE_UP   &kp PAGE_DOWN   &kp END
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none     &none   &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
&none  &none     &none     &none      &none           &none     &none   &kp K_UNDO      &kp K_REDO    &kp K_COPY      &kp K_CUT        &none
                           &trans     &trans          &trans    &trans  &trans          &trans
            >;
        };

        func {
            label = "ADJU";
            bindings = <
       &kp F10  &kp F1  &kp F2  &kp F3  &none     &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &out OUT_TOG  &none
       &kp F11  &kp F4  &kp F5  &kp F6  &none     &none       &kp RSHIFT  &kp RCTRL   &kp RALT      &kp RGUI
&none  &kp F12  &kp F7  &kp F8  &kp F9  &none     &none       &none       &none       &none         &none     &none
                        &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };

        system_actions {
            bindings = <
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        english_2 {
            label = "qnglish";
            bindings = <
       &kp Q        &kp P        &kp H         &kp Y         &kp X        &kp Z            &kp W         &kp D         &kp L        &kp V
       &hrm LGUI E  &hrm LALT A  &hrm LCTRL O  &hrm LSHFT I  &kp U        &kp M            &hrm RSHFT S  &hrm RCTRL T  &hrm RALT R  &hrm RGUI N
&none  &kp J        &none        &none         &kp K         &none        &kp G            &kp F         &kp C         &none        &kp B        &none
                                 &lt 0 TAB     &lt 4 SPACE   &lt 8 ESC    &lt 6 BACKSPACE  &lt 2 SPACE   &lt 9 RET
            >;
        };
    };
};
